{"version":3,"sources":["Components/textBox.jsx","index.js"],"names":["useStyles","makeStyles","theme","search","margin","width","backgroundColor","cards","display","flexDirection","justifyContent","alignContent","height","textAlign","cardContainer","city","fontSize","fontVariant","color","description","humidity","paddingTop","lineHeight","humidityPercen","fontWeight","padding","icon","marginTop","main","flex","temp","F","TextBox","useState","query","setQuery","weather","setWeather","classes","settings","dots","infinite","slidesToShow","numSlidesToShow","slidesToScroll","swipe","beforeChange","currentSlide","nextSlide","console","log","afterChange","handleSubmit","p","key","url","fetch","then","res","json","response","cod","name","country","sys","feelsLike","feels_like","length","pressure","alert","getFahrenheit","kelvin","Math","round","id","TextField","className","label","variant","type","value","placeholder","onKeyPress","e","onChange","target","map","info","Card","CardContent","Typography","split","getCity","CardMedia","image","title","shrink","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d894e57.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Card } from '@material-ui/core';\nimport { CardContent } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n// import { Input } from '@material-ui/core'\nimport { Typography } from '@material-ui/core';\nimport { CardMedia }  from '@material-ui/core';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport './textbox.css'\n\n// import { render } from '@testing-library/react';\n\n\nconst useStyles = makeStyles((theme) => ({\n    search:{\n        margin: \"15px 38% 0px 38%\",\n        width: \"300px\",\n        backgroundColor: 'red'\n    },\n    cards:{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignContent: 'space-around',\n        width:\"90%\",\n        height: \"500px\",\n        textAlign: 'center',\n        backgroundColor: 'transparent',\n        margin: 'auto'\n    },\n    cardContainer:{\n        width: \"200px\",\n    },\n    city:{\n        fontSize: '21px',\n        fontVariant: 'small-caps',\n        color: \"white\",\n    },\n    description:{\n        fontSize:\"15\"\n    },\n    humidity:{\n        paddingTop: 30,\n        fontSize: '20px',\n        lineHeight: 0,\n        margin: 0,\n        color: 'white'\n    },\n    humidityPercen:{\n        color: 'white',\n        fontSize: 30,\n        fontWeight: \"bold\",\n        margin: 0,\n        padding: 0,\n    },\n    icon:{\n        marginTop: 10,\n        height: 60,\n        width: 100,\n        margin: 'auto'\n    },\n    main:{\n        flex: '3 0 auto'\n    },\n    temp:{\n        lineHeight: 0.6,\n        fontSize: '50px',\n        fontWeight: 'bold',\n        color: \"white\",\n        paddingTop: 10,\n    },\n    F:{\n        fontSize: 25\n    },\n}));\n\nfunction TextBox(){\n    const apiBase = \"https://api.openweathermap.org/data/2.5/weather?\"\n    const apiKey = \"48f4742bda635e7e77c5204a0b25a736\"\n    const apiIcon = \"https://openweathermap.org/img/wn\"\n    const [query, setQuery] = useState('')\n    const [weather, setWeather] = useState([])\n    const classes = useStyles();\n    const settings = {\n      dots: true,\n      infinite: true,\n      slidesToShow: numSlidesToShow(),\n      slidesToScroll: numSlidesToShow(),\n      swipe: true,\n      beforeChange: function(currentSlide, nextSlide) {\n        console.log(\"before change\", currentSlide, nextSlide);\n      },\n      afterChange: function(currentSlide) {\n        console.log(\"after change\", currentSlide);\n      }\n    }\n\n    function handleSubmit(p){\n        if(p.key === 'Enter'){\n            const url = `${apiBase}q=${query}&APPID=${apiKey}`;\n            fetch(url)\n            .then(res => res.json())\n            .then(response => updateHook(response));\n        }\n    }\n\n    function updateHook(res){\n        if(res.cod === 200){\n            setWeather([{\n                city: res.name,\n                country: res.sys.country,\n                description: res.weather[0].description,\n                feelsLike: res.main.feels_like,\n                humidity: res.main.humidity,\n                icon: `${apiIcon}/${res.weather[0].icon}@2x.png`,\n                key: weather.length,\n                pressure: res.main.pressure,\n                temp: res.main.temp,\n            },...weather]);\n            setQuery('');\n            console.log(res);\n        }\n        else{\n            setQuery('');\n            cityNotFound();\n        }\n    }\n\n    function getFahrenheit(kelvin){\n        return Math.round((((Math.round(kelvin) - 273.15)* 9)/ 5)+ 32);\n    }\n\n    function cityNotFound(){\n        alert(\"Whoops! That city doesn't exist.\");\n    }\n\n    function numSlidesToShow(){\n        return (weather.length < 5) ? weather.length : 5; \n    }\n\n    function getCity(e){\n        const split = e.split(\" \");\n        let city = `${split[0]} ${split[1]}`\n        return (split.length === 1) ? e : city;\n    }\n    \n    return (\n        <div id=\"weather\">\n            <div id=\"search\">\n                <TextField \n                    className={classes.search} \n                    label=\"City\"  \n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    type=\"string\"\n                    value={query}\n                    placeholder=\"ex. Los Angeles\"\n                    onKeyPress={e => handleSubmit(e)}\n                    onChange={e => setQuery(e.target.value)}\n                />\n            </div>\n            <div id=\"api-data\">\n                <Slider {...settings}>\n                {weather.map(info => (\n                <div className={classes.cardContainer}>\n                    <Card className={classes.cards} key={info.key}>\n                        {/* <CardContent className={classes.main}>\n                            <Typography className={classes.city}>\n                                {getCity(info.city)}, {info.country}\n                            </Typography>\n                        </CardContent> */}\n                        <CardContent >\n                            <Typography className={classes.city}>\n                                {getCity(info.city)}, {info.country}\n                            </Typography>\n                            <Typography className={classes.temp}>\n                                {getFahrenheit(info.temp)}<span className={classes.F}>Â°F</span>\n                                <CardMedia\n                                    className={classes.icon}\n                                    image={info.icon}\n                                    title=\"Weather Icon\"\n                                />\n                                <Typography className={classes.description}>\n                                    {info.description}\n                                </Typography>\n                            </Typography>\n                        </CardContent>\n                        <CardContent className={classes.shrink}>\n                            <Typography className={classes.humidity}>\n                                Feels Like Â°F\n                            </Typography>\n                            <Typography className={classes.humidityPercen}>\n                                {getFahrenheit(info.feelsLike)}\n                            </Typography>\n                        </CardContent>\n                        <CardContent className={classes.shrink}>\n                            <Typography className={classes.humidity}>\n                                Humidity %\n                            </Typography>\n                            <Typography className={classes.humidityPercen}>\n                                {info.humidity}\n                            </Typography>\n                        </CardContent>\n                        <CardContent className={classes.shrink}>\n                            <div>\n                                <Typography className={classes.humidity}>\n                                    Pressure Pa\n                                </Typography>\n                                <Typography className={classes.humidityPercen}>\n                                    {info.pressure}\n                                </Typography>\n                            </div>\n                        </CardContent>\n                    </Card>\n                </div>\n                ))}\n                </Slider>\n            </div>\n        </div>);\n}\n \nexport default TextBox;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Textbox from './Components/textBox';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <Textbox/>\n  // </React.StrictMode>,\n  <Textbox/>,\n  // <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}